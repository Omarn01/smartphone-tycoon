'use client'
import type { Metadata } from 'next'
import { Inter } from 'next/font/google'
import './globals.css'

import { FC, createContext } from 'react'
import { useState } from 'react'
const inter = Inter({ subsets: ['latin'] })

// export const metadata: Metadata = {
//   title: 'Create Next App',
//   description: 'Generated by create next app',
// }

interface IProps {
  sidebar: number
  setSidebar: FC
}

export const Context = createContext({})

export default function RootLayout({
  children,
}: Readonly<{
  children: React.ReactNode
}>) {
  // Size
  const [sidebar, setSidebar] = useState(1)
  const [phoneWidth, setPhoneWidth] = useState(100)
  const [phoneHeight, setPhoneHeight] = useState(200)
  const [phoneThickness, setPhoneThickness] = useState(20)
  const [phoneSideFrames, setPhoneSideFrames] = useState(6)
  const [phoneWidthDisplay, setPhoneWidthDisplay] = useState(70)
  const [phoneHeightDisplay, setPhoneHeightDisplay] = useState(150)
  const [homeButton, setHomeButton] = useState(1)

  // Color
  const [phoneColor, setPhoneColor] = useState('')

  // Display
  const [matrix, setMatrix] = useState('TN')
  const [resolution, setResolution] = useState('LDPI')
  const [screenFrequency, setScreenFrequency] = useState(60)
  const [peakBrightness, setPeakBrightness] = useState(300)

  const updateHeight = (sign: string) => {
    if (sign === '+' && phoneHeight < 250)
      setPhoneHeight((prev: number) => (prev += 5))
    if (sign === '-' && phoneHeight > 120) {
      setPhoneHeight((prev: number) => (prev -= 5))
    }
  }

  const updateResolution = (type: string) => {
    if (type === 'LDPI') setResolution('LDPI')
    if (type === 'MDPI') setResolution('MDPI')
    if (type === 'HDPI') setResolution('HDPI')
    if (type === 'XHDPI') setResolution('XHDPI')
    if (type === 'XXHDPI') setResolution('XXHDPI')
    if (type === 'XXXHDPI') setResolution('XXXHDPI')
  }

  const updateMatrix = (type: string) => {
    if (type === 'TN') setMatrix('TN')
    if (type === 'IPS') setMatrix('IPS')
    if (type === 'AMOLED') setMatrix('AMOLED')
    if (type === 'SUPERAMOLED') setMatrix('SUPERAMOLED')
    if (type === 'OLED') setMatrix('OLED')
    if (type === 'QLED') setMatrix('QLED')
    if (type === 'LCD') setMatrix('LCD')
  }

  return (
    <html lang='en'>
      <body className={inter.className}>
        <Context.Provider
          value={{
            screenFrequency,
            setScreenFrequency,
            peakBrightness,
            setPeakBrightness,
            resolution,
            updateResolution,
            updateHeight,
            updateMatrix,
            sidebar,
            setSidebar,
            phoneWidth,
            setPhoneWidth,
            phoneHeight,
            setPhoneHeight,
            phoneThickness,
            setPhoneThickness,
            phoneSideFrames,
            setPhoneSideFrames,
            phoneWidthDisplay,
            setPhoneWidthDisplay,
            phoneHeightDisplay,
            setPhoneHeightDisplay,
            homeButton,
            setHomeButton,
            phoneColor,
            setPhoneColor,
            matrix,
            setMatrix,
          }}
        >
          {children}
        </Context.Provider>
      </body>
    </html>
  )
}
