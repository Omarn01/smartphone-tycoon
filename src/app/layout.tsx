'use client'
import type { Metadata } from 'next'
import { Inter, Poppins } from 'next/font/google'
import './globals.css'

import { FC, createContext, useCallback, useMemo } from 'react'
import { useState } from 'react'
const inter = Inter({ subsets: ['latin'] })
// const poppins = Poppins({ weight: ['400', '500', '600', '700', '800'] })

// export const metadata: Metadata = {
//   title: 'Create Next App',
//   description: 'Generated by create next app',
// }

export interface IPhone {
  price: number

  width: number
  height: number
  thickness: number
  borderRadius: number
  sideFrames: number
  widthDisplay: number
  heightDisplay: number
  chin: number
  homeButton: number
  // color
  color: string
  // display
  matrix: string
  resolution: string
  screenFrequency: number
  peakBrightness: number
  contrast: number
  grayscale: number
  screenProtection: string
  screenProtectionValue: number
  HDRValue: number
  HDR: string
  adaptiveScreenFrequency: boolean
}

interface IPrice {
  width: number
  height: number
  thickness: number
  sideFrames: number
  widthDisplay: number
  heightDisplay: number
  chin: number
  homeButton: number
  // color

  // display
  matrix: number
  resolution: number
  screenFrequency: number
  peakBrightness: number
  screenProtectionValue: number
  HDRValue: number
  adaptiveScreenFrequency: number
}
export const initialPhonePrice = {
  width: 0.5,
  height: 0.5,
  thickness: 0.5,
  sideFrames: 1,
  widthDisplay: 2,
  heightDisplay: 2,
  chin: 1,
  homeButton: 2,
  // color
  // display
  matrix: 7,
  resolution: 5,
  screenFrequency: 2,
  peakBrightness: 3,
  screenProtectionValue: 1,
  HDRValue: 0,
  adaptiveScreenFrequency: 0,
}

export const initialPhoneState = {
  price: 0,

  width: 100,
  height: 200,
  thickness: 30,
  sideFrames: 6,
  borderRadius: 0,
  widthDisplay: 70,
  heightDisplay: 150,
  chin: 15,
  homeButton: 1,
  // color
  color: '#fff',
  // display
  matrix: 'TN',
  resolution: 'LDPI',
  peakBrightness: 300,
  screenFrequency: 60,
  contrast: 50,
  grayscale: 60,
  screenProtectionValue: 1,
  screenProtection: '1',
  HDRValue: 0,
  HDR: 'none',
  adaptiveScreenFrequency: false,
}

export const Context = createContext({})

export default function RootLayout({
  children,
}: Readonly<{
  children: React.ReactNode
}>) {
  const [cashCompany, setCashCompany] = useState(1000000)
  const [nameCompany, setNameCompany] = useState('')
  const [fans, setFans] = useState(0)

  const [yourPhone, setYourPhone] = useState([])

  const [phone, setPhone] = useState(initialPhoneState)
  const [initialPriceState, setInitialPriceState] =
    useState<IPrice>(initialPhonePrice)
  const [price, setPrice] = useState(0)

  const updatePrice = (technologies: string, count: number) => {
    // Size
    if (technologies === 'width')
      setInitialPriceState((prev: IPrice) => ({ ...prev, width: count }))
    if (technologies === 'height')
      setInitialPriceState((prev: IPrice) => ({ ...prev, height: count }))

    // Display
    if (technologies === 'matrix')
      setInitialPriceState((prev: IPrice) => ({ ...prev, matrix: count }))
    if (technologies === 'resolution')
      setInitialPriceState((prev: IPrice) => ({ ...prev, resolution: count }))
    if (technologies === 'peakBrightness') {
      setInitialPriceState((prev: IPrice) => ({
        ...prev,
        peakBrightness: count / 50,
      }))
    }
    if (technologies === 'screenFrequency')
      setInitialPriceState((prev: IPrice) => ({
        ...prev,
        screenFrequency: count,
      }))
    if (technologies === 'screenProtectionValue') {
      setInitialPriceState((prev: IPrice) => ({
        ...prev,
        screenProtectionValue: count,
      }))
    }
    if (technologies === 'HDRValue')
      setInitialPriceState((prev: IPrice) => ({ ...prev, HDRValue: count }))

    if (technologies === 'adaptiveScreenFrequency')
      setInitialPriceState((prev: IPrice) => ({ ...prev, HDRValue: count }))
    let finalPrice = 0

    Object.entries(initialPriceState).forEach(([_, value]) => {
      finalPrice += value
    })
    setPrice(finalPrice)
  }
  console.log(price)

  // Size
  const [sidebar, setSidebar] = useState(1)

  const checkMatrix = useMemo(() => {
    if (phone.matrix === 'TN') {
      updatePrice('matrix', initialPhonePrice.matrix)

      setPhone((prev: IPhone) => ({ ...prev, contrast: 40 }))
    }
    if (phone.matrix === 'IPS') {
      updatePrice('matrix', 20)

      setPhone((prev: IPhone) => ({ ...prev, contrast: 50 }))
    }
    if (phone.matrix === 'AMOLED') {
      updatePrice('matrix', 50)

      setPhone((prev: IPhone) => ({ ...prev, contrast: 60 }))
    }
    if (phone.matrix === 'SUPERAMOLED') {
      updatePrice('matrix', 60)

      setPhone((prev: IPhone) => ({ ...prev, contrast: 70 }))
    }
    if (phone.matrix === 'OLED') {
      updatePrice('matrix', 80)

      setPhone((prev: IPhone) => ({ ...prev, contrast: 80 }))
    }
    if (phone.matrix === 'QLED') {
      updatePrice('matrix', 110)

      setPhone((prev: IPhone) => ({ ...prev, contrast: 90 }))
    }
    if (phone.matrix === 'LCD') {
      updatePrice('matrix', 150)

      setPhone((prev: IPhone) => ({ ...prev, contrast: 100 }))
    }
  }, [phone.matrix])

  const checkResolution = useMemo(() => {
    if (phone.resolution === 'LDPI') {
      updatePrice('resolution', initialPhonePrice.resolution)

      setPhone((prev: IPhone) => ({ ...prev, grayscale: 60 }))
    }

    if (phone.resolution === 'MDPI') {
      updatePrice('resolution', 10)

      setPhone((prev: IPhone) => ({ ...prev, grayscale: 50 }))
    }
    if (phone.resolution === 'HDPI') {
      updatePrice('resolution', 15)

      setPhone((prev: IPhone) => ({ ...prev, grayscale: 35 }))
    }
    if (phone.resolution === 'XHDPI') {
      updatePrice('resolution', 20)

      setPhone((prev: IPhone) => ({ ...prev, grayscale: 20 }))
    }
    if (phone.resolution === 'XXHDPI') {
      updatePrice('resolution', 45)

      setPhone((prev: IPhone) => ({ ...prev, grayscale: 10 }))
    }
    if (phone.resolution === 'XXXHDPI') {
      updatePrice('resolution', 70)

      setPhone((prev: IPhone) => ({ ...prev, grayscale: 10 }))
    }
  }, [phone.resolution])

  const updateChin = useCallback(
    (sign: string) => {
      if (sign === '+' && phone.chin < 20)
        setPhone((prev: IPhone) => ({ ...prev, chin: prev.chin + 0.5 }))
      if (sign === '-' && phone.chin > 0.5) {
        setPhone((prev: IPhone) => ({ ...prev, chin: prev.chin - 0.5 }))
      }
    },
    [phone.chin]
  )
  const updateBorderRadius = (sign: string) => {
    if (sign === '+' && phone.borderRadius < 20)
      setPhone((prev: IPhone) => ({
        ...prev,
        borderRadius: prev.borderRadius + 0.5,
      }))
    if (sign === '-' && phone.borderRadius > 0)
      setPhone((prev: IPhone) => ({
        ...prev,
        borderRadius: prev.borderRadius - 0.5,
      }))
  }

  const updateScreenFrequency = (sign: string) => {
    if (sign === '+' && phone.screenFrequency < 360)
      setPhone((prev: IPhone) => ({
        ...prev,
        screenFrequency: prev.screenFrequency + 30,
      }))
    if (sign === '-' && phone.screenFrequency > 60) {
      setPhone((prev: IPhone) => ({
        ...prev,
        screenFrequency: prev.screenFrequency - 30,
      }))
    }
  }

  const updatePeakBrightness = (sign: string) => {
    if (sign === '+' && phone.peakBrightness < 3000) {
      setPhone((prev: IPhone) => ({
        ...prev,
        peakBrightness: prev.peakBrightness + 50,
      }))
      updatePrice('peakBrightness', phone.peakBrightness + 50)
    }
    if (sign === '-' && phone.peakBrightness > 300) {
      setPhone((prev: IPhone) => ({
        ...prev,
        peakBrightness: prev.peakBrightness - 50,
      }))
      updatePrice('peakBrightness', phone.peakBrightness - 50)
      console.log(phone.peakBrightness)
    }
  }

  const updateSideFrames = (sign: string) => {
    if (sign === '+' && phone.sideFrames < 7)
      setPhone((prev: IPhone) => ({
        ...prev,
        sideFrames: prev.sideFrames + 0.5,
      }))
    if (sign === '-' && phone.sideFrames > 0.5) {
      setPhone((prev: IPhone) => ({
        ...prev,
        sideFrames: prev.sideFrames - 0.5,
      }))
    }
  }

  const updateHeight = (sign: string) => {
    if (sign === '+' && phone.height < 250)
      setPhone((prev: IPhone) => ({ ...prev, height: prev.height + 5 }))
    if (sign === '-' && phone.height > 120) {
      setPhone((prev: IPhone) => ({ ...prev, height: prev.height - 5 }))
    }
  }

  const updateResolution = (type: string) => {
    if (type === 'LDPI')
      setPhone((prev: IPhone) => ({ ...prev, resolution: 'LDPI' }))
    if (type === 'MDPI')
      setPhone((prev: IPhone) => ({ ...prev, resolution: 'MDPI' }))
    if (type === 'HDPI')
      setPhone((prev: IPhone) => ({ ...prev, resolution: 'HDPI' }))
    if (type === 'XHDPI')
      setPhone((prev: IPhone) => ({ ...prev, resolution: 'XHDPI' }))
    if (type === 'XXHDPI')
      setPhone((prev: IPhone) => ({ ...prev, resolution: 'XXHDPI' }))
    if (type === 'XXXHDPI')
      setPhone((prev: IPhone) => ({ ...prev, resolution: 'XXXHDPI' }))
  }

  const updateMatrix = (type: string) => {
    if (type === 'TN') setPhone((prev: IPhone) => ({ ...prev, matrix: 'TN' }))
    if (type === 'IPS') setPhone((prev: IPhone) => ({ ...prev, matrix: 'IPS' }))
    if (type === 'AMOLED')
      setPhone((prev: IPhone) => ({ ...prev, matrix: 'AMOLED' }))
    if (type === 'SUPERAMOLED')
      setPhone((prev: IPhone) => ({ ...prev, matrix: 'SUPERAMOLED' }))
    if (type === 'OLED')
      setPhone((prev: IPhone) => ({ ...prev, matrix: 'OLED' }))
    if (type === 'QLED')
      setPhone((prev: IPhone) => ({ ...prev, matrix: 'QLED' }))
    if (type === 'LCD') setPhone((prev: IPhone) => ({ ...prev, matrix: 'LCD' }))
  }

  const changeHomeButton = (sign: string) => {
    if (sign === '+' && phone.homeButton === 0)
      setPhone((prev: IPhone) => ({ ...prev, homeButton: prev.homeButton + 1 }))
    if (sign === '-' && phone.homeButton === 1)
      setPhone((prev: IPhone) => ({ ...prev, homeButton: prev.homeButton - 1 }))
  }

  const updateWidthDisplay = (sign: string) => {
    if (sign === '+' && phone.widthDisplay < 150)
      setPhone((prev: IPhone) => ({
        ...prev,
        widthDisplay: prev.widthDisplay + 5,
      }))
    if (sign === '-' && phone.widthDisplay > 70)
      setPhone((prev: IPhone) => ({
        ...prev,
        widthDisplay: prev.widthDisplay - 5,
      }))
  }

  const updateHeightDisplay = (sign: string) => {
    if (sign === '+' && phone.heightDisplay < 250)
      setPhone((prev: IPhone) => ({
        ...prev,
        heightDisplay: prev.heightDisplay + 5,
      }))
    if (sign === '-' && phone.heightDisplay > 100)
      setPhone((prev: IPhone) => ({
        ...prev,
        heightDisplay: prev.heightDisplay - 5,
      }))
  }

  const updateScreenProtection = (sign: string) => {
    if (sign === '+' && phone.screenProtectionValue < 14)
      setPhone((prev: IPhone) => ({
        ...prev,
        screenProtectionValue: (prev.screenProtectionValue += 0.5),
      }))
    if (sign === '-' && phone.screenProtectionValue > 0)
      setPhone((prev: IPhone) => ({
        ...prev,
        screenProtectionValue: (prev.screenProtectionValue -= 0.5),
      }))
  }
  const updateAdaptiveScreenFrequency = (e: HTMLInputElement) => {
    if (e) {
      setPhone((prev: IPhone) => ({ ...prev, adaptiveScreenFrequency: true }))
      updatePrice('adaptiveScreenFrequency', 50)
    } else {
      setPhone((prev: IPhone) => ({ ...prev, adaptiveScreenFrequency: false }))
      updatePrice('adaptiveScreenFrequency', 0)
    }
  }
  const checkScreenProtection = useMemo(() => {
    if (phone.screenProtectionValue === 1) {
      updatePrice(
        'screenProtectionValue',
        initialPhonePrice.screenProtectionValue
      )

      setPhone((prev: IPhone) => ({ ...prev, screenProtection: '1' }))
    }
    if (phone.screenProtectionValue === 2) {
      updatePrice('screenProtectionValue', 5)

      setPhone((prev: IPhone) => ({ ...prev, screenProtection: '2' }))
    }
    if (phone.screenProtectionValue === 3) {
      updatePrice('screenProtectionValue', 7)

      setPhone((prev: IPhone) => ({ ...prev, screenProtection: '3' }))
    }
    if (phone.screenProtectionValue === 4) {
      updatePrice('screenProtectionValue', 10)

      setPhone((prev: IPhone) => ({ ...prev, screenProtection: '4' }))
    }
    if (phone.screenProtectionValue === 5) {
      updatePrice('screenProtectionValue', 15)

      setPhone((prev: IPhone) => ({ ...prev, screenProtection: '5' }))
    }
    if (phone.screenProtectionValue === 6) {
      updatePrice('screenProtectionValue', 25)

      setPhone((prev: IPhone) => ({ ...prev, screenProtection: '6' }))
    }
    if (phone.screenProtectionValue === 7) {
      updatePrice('screenProtectionValue', 30)

      setPhone((prev: IPhone) => ({ ...prev, screenProtection: '7' }))
    }
    if (phone.screenProtectionValue === 8) {
      updatePrice('screenProtectionValue', 35)

      setPhone((prev: IPhone) => ({ ...prev, screenProtection: '8' }))
    }
    if (phone.screenProtectionValue === 9) {
      updatePrice('screenProtectionValue', 50)

      setPhone((prev: IPhone) => ({ ...prev, screenProtection: 'Victus' }))
    }
    if (phone.screenProtectionValue === 10) {
      updatePrice('screenProtectionValue', 55)

      setPhone((prev: IPhone) => ({ ...prev, screenProtection: 'Victus plus' }))
    }
    if (phone.screenProtectionValue === 11) {
      updatePrice('screenProtectionValue', 70)

      setPhone((prev: IPhone) => ({ ...prev, screenProtection: 'Victus 2' }))
    }
    if (phone.screenProtectionValue === 12) {
      updatePrice('screenProtectionValue', 80)

      setPhone((prev: IPhone) => ({
        ...prev,
        screenProtection: 'Victus 2 plus',
      }))
    }
    if (phone.screenProtectionValue === 13) {
      updatePrice('screenProtectionValue', 100)

      setPhone((prev: IPhone) => ({
        ...prev,
        screenProtection: 'Armor',
      }))
    }
  }, [phone.screenProtectionValue])

  const updateHDR = (sign: string) => {
    if (sign === '+' && phone.HDRValue < 4)
      setPhone((prev: IPhone) => ({
        ...prev,
        HDRValue: (prev.HDRValue += 0.5),
      }))
    if (sign === '-' && phone.HDRValue > 0)
      setPhone((prev: IPhone) => ({
        ...prev,
        HDRValue: (prev.HDRValue -= 0.5),
      }))
  }

  const checkHDR = useMemo(() => {
    if (phone.HDRValue === 0) {
      updatePrice('HDRValue', initialPhonePrice.HDRValue)

      setPhone((prev: IPhone) => ({ ...prev, HDR: 'none' }))
    }
    if (phone.HDRValue === 1) {
      updatePrice('HDRValue', 10)

      setPhone((prev: IPhone) => ({ ...prev, HDR: 'Dolby Vision' }))
    }
    if (phone.HDRValue === 2) {
      updatePrice('HDRValue', 20)

      setPhone((prev: IPhone) => ({ ...prev, HDR: 'HDR10' }))
    }
    if (phone.HDRValue === 3) {
      updatePrice('HDRValue', 30)

      setPhone((prev: IPhone) => ({ ...prev, HDR: 'HDR10+' }))
    }
  }, [phone.HDRValue])

  const updateThickness = (sign: string) => {
    if (sign === '+' && phone.thickness < 30)
      setPhone((prev: IPhone) => ({ ...prev, thickness: prev.thickness + 1 }))
    if (sign === '-' && phone.thickness > 5)
      setPhone((prev: IPhone) => ({ ...prev, thickness: prev.thickness - 1 }))
  }

  const updateWidth = (sign: string) => {
    if (sign === '+' && phone.width < 150)
      setPhone((prev: IPhone) => ({ ...prev, width: prev.width + 5 }))
    if (sign === '-' && phone.width > 80)
      setPhone((prev: IPhone) => ({ ...prev, width: prev.width - 5 }))
  }

  const changeColor = (color: string) => {
    setPhone((prev: IPhone) => ({ ...prev, color }))
  }

  return (
    <html lang='en'>
      <body className={inter.className}>
        <Context.Provider
          value={{
            cashCompany,
            setCashCompany,
            nameCompany,
            setNameCompany,
            // Phone
            phone,
            setPhone,
            yourPhone,
            setYourPhone,
            price,
            setPrice,
            // Sidebar
            sidebar,
            setSidebar,
            // Size
            updateWidth,
            updateHeight,
            updateThickness,
            updateBorderRadius,
            updateSideFrames,
            updateWidthDisplay,
            updateHeightDisplay,
            updateScreenFrequency,
            updateChin,
            changeHomeButton,
            // Color
            changeColor,
            // Display
            updateMatrix,
            updateResolution,
            updatePeakBrightness,
            updateScreenProtection,
            updateHDR,
            updateAdaptiveScreenFrequency,
          }}
        >
          {children}
        </Context.Provider>
      </body>
    </html>
  )
}
